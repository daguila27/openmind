  
TextSegment = (function () {
  var cls = function TextSegment() {
      this.startPosition = new Number();
      this.length = new Number();
    };
  return cls;
}) ();
exports.TextSegment = TextSegment;


  
SortEntry = (function () {
  var cls = function SortEntry() {
      this.propertyName = new String();
      this.ascendingOrder = new Boolean();
    };
  return cls;
}) ();
exports.SortEntry = SortEntry;


_DateStackOption = function () {
  this.none = 0;
  this.year = 1;
  this.month = 2;
}
exports.DateStackOption = new _DateStackOption();

_IndexerOption = function () {
  this.useIndexerWhenAvailable = 0;
  this.onlyUseIndexer = 1;
  this.doNotUseIndexer = 2;
}
exports.IndexerOption = new _IndexerOption();

_FolderDepth = function () {
  this.shallow = 0;
  this.deep = 1;
}
exports.FolderDepth = new _FolderDepth();

_CommonFileQuery = function () {
  this.defaultQuery = 0;
  this.orderByName = 1;
  this.orderByTitle = 2;
  this.orderByMusicProperties = 3;
  this.orderBySearchRank = 4;
  this.orderByDate = 5;
}
exports.CommonFileQuery = new _CommonFileQuery();

_CommonFolderQuery = function () {
  this.defaultQuery = 0;
  this.groupByYear = 1;
  this.groupByMonth = 2;
  this.groupByArtist = 3;
  this.groupByAlbum = 4;
  this.groupByAlbumArtist = 5;
  this.groupByComposer = 6;
  this.groupByGenre = 7;
  this.groupByPublishedYear = 8;
  this.groupByRating = 9;
  this.groupByTag = 10;
  this.groupByAuthor = 11;
  this.groupByType = 12;
}
exports.CommonFolderQuery = new _CommonFolderQuery();

_IndexedState = function () {
  this.unknown = 0;
  this.notIndexed = 1;
  this.partiallyIndexed = 2;
  this.fullyIndexed = 3;
}
exports.IndexedState = new _IndexedState();

ContentIndexer = (function () {
  var cls = function ContentIndexer() {
    this.revision = new Number();
  };
  

  cls.prototype.addAsync = function addAsync(indexableContent, callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="indexableContent" type="IIndexableContent">A param.</param>
    /// </signature>
  }


  cls.prototype.updateAsync = function updateAsync(indexableContent, callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="indexableContent" type="IIndexableContent">A param.</param>
    /// </signature>
  }


  cls.prototype.deleteAsync = function deleteAsync(contentId, callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="contentId" type="String">A param.</param>
    /// </signature>
  }


  cls.prototype.deleteMultipleAsync = function deleteMultipleAsync(contentIds, callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="contentIds" type="Object">A param.</param>
    /// </signature>
  }


  cls.prototype.deleteAllAsync = function deleteAllAsync(callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// </signature>
  }


  cls.prototype.retrievePropertiesAsync = function retrievePropertiesAsync(contentId, propertiesToRetrieve, callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="contentId" type="String">A param.</param>
    /// <param name="propertiesToRetrieve" type="Object">A param.</param>
    /// </signature>
  }


  cls.prototype.createQuery = function createQuery(searchFilter, propertiesToRetrieve, sortOrder, searchFilterLanguage) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="searchFilter" type="String">A param.</param>
    /// <param name="propertiesToRetrieve" type="Object">A param.</param>
    /// <param name="sortOrder" type="Object">A param.</param>
    /// <param name="searchFilterLanguage" type="String">A param.</param>
    /// <returns type="ContentIndexerQuery" />
    /// </signature>
    return new ContentIndexerQuery();
  }

cls.prototype.createQuery = function createQuery(searchFilter, propertiesToRetrieve, sortOrder) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="searchFilter" type="String">A param.</param>
    /// <param name="propertiesToRetrieve" type="Object">A param.</param>
    /// <param name="sortOrder" type="Object">A param.</param>
    /// <returns type="ContentIndexerQuery" />
    /// </signature>
    return new ContentIndexerQuery();
  }

cls.prototype.createQuery = function createQuery(searchFilter, propertiesToRetrieve) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="searchFilter" type="String">A param.</param>
    /// <param name="propertiesToRetrieve" type="Object">A param.</param>
    /// <returns type="ContentIndexerQuery" />
    /// </signature>
    return new ContentIndexerQuery();
  }


  cls.getIndexer = function getIndexer(indexName) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="indexName" type="String">A param.</param>
    /// <returns type="ContentIndexer" />
    /// </signature>
    return new ContentIndexer();
  }

cls.getIndexer = function getIndexer() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <returns type="ContentIndexer" />
    /// </signature>
    return new ContentIndexer();
  }


  return cls;
}) ();
exports.ContentIndexer = ContentIndexer;

IIndexableContent = (function () {
  var cls = function IIndexableContent() {
    this.id = new String();
    this.properties = new Object();
    this.stream = new Object();
    this.streamContentType = new String();
  };
  

  return cls;
}) ();
exports.IIndexableContent = IIndexableContent;

ValueAndLanguage = (function () {
  var cls = function ValueAndLanguage() {
    this.value = new Object();
    this.language = new String();
  };
  

  return cls;
}) ();
exports.ValueAndLanguage = ValueAndLanguage;

ContentIndexerQuery = (function () {
  var cls = function ContentIndexerQuery() {
    this.queryFolder = new Object();
  };
  

  cls.prototype.getCountAsync = function getCountAsync(callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// </signature>
  }


  cls.prototype.getPropertiesAsync = function getPropertiesAsync(callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// </signature>
  }

cls.prototype.getPropertiesAsync = function getPropertiesAsync(startIndex, maxItems, callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="startIndex" type="Number">A param.</param>
    /// <param name="maxItems" type="Number">A param.</param>
    /// </signature>
  }


  cls.prototype.getAsync = function getAsync(callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// </signature>
  }

cls.prototype.getAsync = function getAsync(startIndex, maxItems, callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="startIndex" type="Number">A param.</param>
    /// <param name="maxItems" type="Number">A param.</param>
    /// </signature>
  }


  return cls;
}) ();
exports.ContentIndexerQuery = ContentIndexerQuery;

IndexableContent = (function () {
  var cls = function IndexableContent() {
    this.streamContentType = new String();
    this.stream = new Object();
    this.id = new String();
    this.properties = new Object();
  };
  

  return cls;
}) ();
exports.IndexableContent = IndexableContent;

QueryOptions = (function () {
  var cls = function QueryOptions() {
    this.userSearchFilter = new String();
    this.language = new String();
    this.indexerOption = new IndexerOption();
    this.folderDepth = new FolderDepth();
    this.applicationSearchFilter = new String();
    this.dateStackOption = new DateStackOption();
    this.fileTypeFilter = new Object();
    this.groupPropertyName = new String();
    this.sortOrder = new Object();
    this.storageProviderIdFilter = new Object();
  };
  
var cls = function QueryOptions(query, fileTypeFilter) {
      this.userSearchFilter = new String();
      this.language = new String();
      this.indexerOption = new IndexerOption();
      this.folderDepth = new FolderDepth();
      this.applicationSearchFilter = new String();
      this.dateStackOption = new DateStackOption();
      this.fileTypeFilter = new Object();
      this.groupPropertyName = new String();
      this.sortOrder = new Object();
      this.storageProviderIdFilter = new Object();
};

var cls = function QueryOptions(query) {
      this.userSearchFilter = new String();
      this.language = new String();
      this.indexerOption = new IndexerOption();
      this.folderDepth = new FolderDepth();
      this.applicationSearchFilter = new String();
      this.dateStackOption = new DateStackOption();
      this.fileTypeFilter = new Object();
      this.groupPropertyName = new String();
      this.sortOrder = new Object();
      this.storageProviderIdFilter = new Object();
};


  cls.prototype.saveToString = function saveToString() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <returns type="String" />
    /// </signature>
    return new String();
  }


  cls.prototype.loadFromString = function loadFromString(value) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="value" type="String">A param.</param>
    /// </signature>
  }


  cls.prototype.setThumbnailPrefetch = function setThumbnailPrefetch(mode, requestedSize, options) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="mode" type="Number">A param.</param>
    /// <param name="requestedSize" type="Number">A param.</param>
    /// <param name="options" type="Number">A param.</param>
    /// </signature>
  }


  cls.prototype.setPropertyPrefetch = function setPropertyPrefetch(options, propertiesToRetrieve) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="options" type="Number">A param.</param>
    /// <param name="propertiesToRetrieve" type="Object">A param.</param>
    /// </signature>
  }


  return cls;
}) ();
exports.QueryOptions = QueryOptions;

IStorageQueryResultBase = (function () {
  var cls = function IStorageQueryResultBase() {
    this.folder = new Object();
  };
  

  cls.prototype.getItemCountAsync = function getItemCountAsync(callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// </signature>
  }


  cls.prototype.findStartIndexAsync = function findStartIndexAsync(value, callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="value" type="Object">A param.</param>
    /// </signature>
  }


  cls.prototype.getCurrentQueryOptions = function getCurrentQueryOptions() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <returns type="QueryOptions" />
    /// </signature>
    return new QueryOptions();
  }


  cls.prototype.applyNewQueryOptions = function applyNewQueryOptions(newQueryOptions) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="newQueryOptions" type="QueryOptions">A param.</param>
    /// </signature>
  }


    cls.prototype.addListener = function addListener(eventName, callback){}
    cls.prototype.removeListener = function removeListener(eventName, callback){}
    cls.prototype.on = function on(eventName, callback){}
    cls.prototype.off = function off(eventName, callback){}
  return cls;
}) ();
exports.IStorageQueryResultBase = IStorageQueryResultBase;

IStorageFolderQueryOperations = (function () {
  var cls = function IStorageFolderQueryOperations() {
  };
  

  cls.prototype.getIndexedStateAsync = function getIndexedStateAsync(callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// </signature>
  }


  cls.prototype.getFilesAsync = function getFilesAsync(query, startIndex, maxItemsToRetrieve, callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="query" type="CommonFileQuery">A param.</param>
    /// <param name="startIndex" type="Number">A param.</param>
    /// <param name="maxItemsToRetrieve" type="Number">A param.</param>
    /// </signature>
  }

cls.prototype.getFilesAsync = function getFilesAsync(query, callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="query" type="CommonFileQuery">A param.</param>
    /// </signature>
  }


  cls.prototype.getFoldersAsync = function getFoldersAsync(query, startIndex, maxItemsToRetrieve, callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="query" type="CommonFolderQuery">A param.</param>
    /// <param name="startIndex" type="Number">A param.</param>
    /// <param name="maxItemsToRetrieve" type="Number">A param.</param>
    /// </signature>
  }

cls.prototype.getFoldersAsync = function getFoldersAsync(query, callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="query" type="CommonFolderQuery">A param.</param>
    /// </signature>
  }


  cls.prototype.getItemsAsync = function getItemsAsync(startIndex, maxItemsToRetrieve, callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="startIndex" type="Number">A param.</param>
    /// <param name="maxItemsToRetrieve" type="Number">A param.</param>
    /// </signature>
  }


  cls.prototype.createFileQuery = function createFileQuery() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <returns type="StorageFileQueryResult" />
    /// </signature>
    return new StorageFileQueryResult();
  }

cls.prototype.createFileQuery = function createFileQuery(query) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="query" type="CommonFileQuery">A param.</param>
    /// <returns type="StorageFileQueryResult" />
    /// </signature>
    return new StorageFileQueryResult();
  }


  cls.prototype.createFileQueryWithOptions = function createFileQueryWithOptions(queryOptions) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="queryOptions" type="QueryOptions">A param.</param>
    /// <returns type="StorageFileQueryResult" />
    /// </signature>
    return new StorageFileQueryResult();
  }


  cls.prototype.createFolderQuery = function createFolderQuery() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <returns type="StorageFolderQueryResult" />
    /// </signature>
    return new StorageFolderQueryResult();
  }

cls.prototype.createFolderQuery = function createFolderQuery(query) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="query" type="CommonFolderQuery">A param.</param>
    /// <returns type="StorageFolderQueryResult" />
    /// </signature>
    return new StorageFolderQueryResult();
  }


  cls.prototype.createFolderQueryWithOptions = function createFolderQueryWithOptions(queryOptions) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="queryOptions" type="QueryOptions">A param.</param>
    /// <returns type="StorageFolderQueryResult" />
    /// </signature>
    return new StorageFolderQueryResult();
  }


  cls.prototype.createItemQuery = function createItemQuery() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <returns type="StorageItemQueryResult" />
    /// </signature>
    return new StorageItemQueryResult();
  }


  cls.prototype.createItemQueryWithOptions = function createItemQueryWithOptions(queryOptions) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="queryOptions" type="QueryOptions">A param.</param>
    /// <returns type="StorageItemQueryResult" />
    /// </signature>
    return new StorageItemQueryResult();
  }


  cls.prototype.areQueryOptionsSupported = function areQueryOptionsSupported(queryOptions) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="queryOptions" type="QueryOptions">A param.</param>
    /// <returns type="Boolean" />
    /// </signature>
    return new Boolean();
  }


  cls.prototype.isCommonFolderQuerySupported = function isCommonFolderQuerySupported(query) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="query" type="CommonFolderQuery">A param.</param>
    /// <returns type="Boolean" />
    /// </signature>
    return new Boolean();
  }


  cls.prototype.isCommonFileQuerySupported = function isCommonFileQuerySupported(query) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="query" type="CommonFileQuery">A param.</param>
    /// <returns type="Boolean" />
    /// </signature>
    return new Boolean();
  }


  return cls;
}) ();
exports.IStorageFolderQueryOperations = IStorageFolderQueryOperations;

StorageFileQueryResult = (function () {
  var cls = function StorageFileQueryResult() {
    this.folder = new Object();
  };
  

  cls.prototype.getFilesAsync = function getFilesAsync(startIndex, maxNumberOfItems, callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="startIndex" type="Number">A param.</param>
    /// <param name="maxNumberOfItems" type="Number">A param.</param>
    /// </signature>
  }

cls.prototype.getFilesAsync = function getFilesAsync(callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// </signature>
  }


  cls.prototype.getItemCountAsync = function getItemCountAsync(callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// </signature>
  }


  cls.prototype.findStartIndexAsync = function findStartIndexAsync(value, callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="value" type="Object">A param.</param>
    /// </signature>
  }


  cls.prototype.getCurrentQueryOptions = function getCurrentQueryOptions() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <returns type="QueryOptions" />
    /// </signature>
    return new QueryOptions();
  }


  cls.prototype.applyNewQueryOptions = function applyNewQueryOptions(newQueryOptions) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="newQueryOptions" type="QueryOptions">A param.</param>
    /// </signature>
  }


  cls.prototype.getMatchingPropertiesWithRanges = function getMatchingPropertiesWithRanges(file) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="file" type="Object">A param.</param>
    /// <returns type="Object" />
    /// </signature>
    return new Object();
  }


    cls.prototype.addListener = function addListener(eventName, callback){}
    cls.prototype.removeListener = function removeListener(eventName, callback){}
    cls.prototype.on = function on(eventName, callback){}
    cls.prototype.off = function off(eventName, callback){}
  return cls;
}) ();
exports.StorageFileQueryResult = StorageFileQueryResult;

StorageFolderQueryResult = (function () {
  var cls = function StorageFolderQueryResult() {
    this.folder = new Object();
  };
  

  cls.prototype.getFoldersAsync = function getFoldersAsync(startIndex, maxNumberOfItems, callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="startIndex" type="Number">A param.</param>
    /// <param name="maxNumberOfItems" type="Number">A param.</param>
    /// </signature>
  }

cls.prototype.getFoldersAsync = function getFoldersAsync(callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// </signature>
  }


  cls.prototype.getItemCountAsync = function getItemCountAsync(callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// </signature>
  }


  cls.prototype.findStartIndexAsync = function findStartIndexAsync(value, callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="value" type="Object">A param.</param>
    /// </signature>
  }


  cls.prototype.getCurrentQueryOptions = function getCurrentQueryOptions() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <returns type="QueryOptions" />
    /// </signature>
    return new QueryOptions();
  }


  cls.prototype.applyNewQueryOptions = function applyNewQueryOptions(newQueryOptions) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="newQueryOptions" type="QueryOptions">A param.</param>
    /// </signature>
  }


    cls.prototype.addListener = function addListener(eventName, callback){}
    cls.prototype.removeListener = function removeListener(eventName, callback){}
    cls.prototype.on = function on(eventName, callback){}
    cls.prototype.off = function off(eventName, callback){}
  return cls;
}) ();
exports.StorageFolderQueryResult = StorageFolderQueryResult;

StorageItemQueryResult = (function () {
  var cls = function StorageItemQueryResult() {
    this.folder = new Object();
  };
  

  cls.prototype.getItemsAsync = function getItemsAsync(startIndex, maxNumberOfItems, callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="startIndex" type="Number">A param.</param>
    /// <param name="maxNumberOfItems" type="Number">A param.</param>
    /// </signature>
  }

cls.prototype.getItemsAsync = function getItemsAsync(callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// </signature>
  }


  cls.prototype.getItemCountAsync = function getItemCountAsync(callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// </signature>
  }


  cls.prototype.findStartIndexAsync = function findStartIndexAsync(value, callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="value" type="Object">A param.</param>
    /// </signature>
  }


  cls.prototype.getCurrentQueryOptions = function getCurrentQueryOptions() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <returns type="QueryOptions" />
    /// </signature>
    return new QueryOptions();
  }


  cls.prototype.applyNewQueryOptions = function applyNewQueryOptions(newQueryOptions) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="newQueryOptions" type="QueryOptions">A param.</param>
    /// </signature>
  }


    cls.prototype.addListener = function addListener(eventName, callback){}
    cls.prototype.removeListener = function removeListener(eventName, callback){}
    cls.prototype.on = function on(eventName, callback){}
    cls.prototype.off = function off(eventName, callback){}
  return cls;
}) ();
exports.StorageItemQueryResult = StorageItemQueryResult;

SortEntryVector = (function () {
  var cls = function SortEntryVector() {
  };
  

  cls.prototype.getAt = function getAt(index) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="index" type="Number">A param.</param>
    /// <returns type="SortEntry" />
    /// </signature>
    return new SortEntry();
  }


  cls.prototype.getView = function getView() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <returns type="Object" />
    /// </signature>
    return new Object();
  }


  cls.prototype.indexOf = function indexOf(value, index) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="value" type="SortEntry">A param.</param>
    /// <param name="index" type="Number">A param.</param>
    /// <returns type="Boolean" />
    /// </signature>
    return new Boolean();
  }


  cls.prototype.setAt = function setAt(index, value) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="index" type="Number">A param.</param>
    /// <param name="value" type="SortEntry">A param.</param>
    /// </signature>
  }


  cls.prototype.insertAt = function insertAt(index, value) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="index" type="Number">A param.</param>
    /// <param name="value" type="SortEntry">A param.</param>
    /// </signature>
  }


  cls.prototype.removeAt = function removeAt(index) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="index" type="Number">A param.</param>
    /// </signature>
  }


  cls.prototype.append = function append(value) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="value" type="SortEntry">A param.</param>
    /// </signature>
  }


  cls.prototype.removeAtEnd = function removeAtEnd() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// </signature>
  }


  cls.prototype.clear = function clear() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// </signature>
  }


  cls.prototype.getMany = function () {
}

  cls.prototype.replaceAll = function replaceAll(items) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="items" type="Array<SortEntry>">A param.</param>
    /// </signature>
  }


  cls.prototype.first = function first() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <returns type="Object" />
    /// </signature>
    return new Object();
  }


  return cls;
}) ();
exports.SortEntryVector = SortEntryVector;

