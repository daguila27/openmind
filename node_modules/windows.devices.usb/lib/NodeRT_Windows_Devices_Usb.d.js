_UsbTransferDirection = function () {
  this.out = 0;
  this.in = 1;
}
exports.UsbTransferDirection = new _UsbTransferDirection();

_UsbEndpointType = function () {
  this.control = 0;
  this.isochronous = 1;
  this.bulk = 2;
  this.interrupt = 3;
}
exports.UsbEndpointType = new _UsbEndpointType();

_UsbControlRecipient = function () {
  this.device = 0;
  this.specifiedInterface = 1;
  this.endpoint = 2;
  this.other = 3;
  this.defaultInterface = 4;
}
exports.UsbControlRecipient = new _UsbControlRecipient();

_UsbControlTransferType = function () {
  this.standard = 0;
  this.class = 1;
  this.vendor = 2;
}
exports.UsbControlTransferType = new _UsbControlTransferType();

_UsbReadOptions = function () {
  this.none = 0;
  this.autoClearStall = 1;
  this.overrideAutomaticBufferManagement = 2;
  this.ignoreShortPacket = 3;
  this.allowPartialReads = 4;
}
exports.UsbReadOptions = new _UsbReadOptions();

_UsbWriteOptions = function () {
  this.none = 0;
  this.autoClearStall = 1;
  this.shortPacketTerminate = 2;
}
exports.UsbWriteOptions = new _UsbWriteOptions();

UsbControlRequestType = (function () {
  var cls = function UsbControlRequestType() {
    this.recipient = new UsbControlRecipient();
    this.direction = new UsbTransferDirection();
    this.controlTransferType = new UsbControlTransferType();
    this.asByte = new Number();
  };
  

  return cls;
}) ();
exports.UsbControlRequestType = UsbControlRequestType;

UsbSetupPacket = (function () {
  var cls = function UsbSetupPacket() {
    this.value = new Number();
    this.requestType = new UsbControlRequestType();
    this.request = new Number();
    this.length = new Number();
    this.index = new Number();
  };
  
var cls = function UsbSetupPacket(eightByteBuffer) {
      this.value = new Number();
      this.requestType = new UsbControlRequestType();
      this.request = new Number();
      this.length = new Number();
      this.index = new Number();
};


  return cls;
}) ();
exports.UsbSetupPacket = UsbSetupPacket;

UsbDeviceClass = (function () {
  var cls = function UsbDeviceClass() {
    this.subclassCode = new Number();
    this.protocolCode = new Number();
    this.classCode = new Number();
  };
  

  return cls;
}) ();
exports.UsbDeviceClass = UsbDeviceClass;

UsbDeviceClasses = (function () {
  var cls = function UsbDeviceClasses() {
  };
  

  cls.activeSync = new UsbDeviceClass();
  cls.cdcControl = new UsbDeviceClass();
  cls.deviceFirmwareUpdate = new UsbDeviceClass();
  cls.irda = new UsbDeviceClass();
  cls.measurement = new UsbDeviceClass();
  cls.palmSync = new UsbDeviceClass();
  cls.personalHealthcare = new UsbDeviceClass();
  cls.physical = new UsbDeviceClass();
  cls.vendorSpecific = new UsbDeviceClass();
  return cls;
}) ();
exports.UsbDeviceClasses = UsbDeviceClasses;

UsbDevice = (function () {
  var cls = function UsbDevice() {
    this.configuration = new UsbConfiguration();
    this.defaultInterface = new UsbInterface();
    this.deviceDescriptor = new UsbDeviceDescriptor();
  };
  

  cls.prototype.sendControlOutTransferAsync = function sendControlOutTransferAsync(setupPacket, buffer, callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="setupPacket" type="UsbSetupPacket">A param.</param>
    /// <param name="buffer" type="Object">A param.</param>
    /// </signature>
  }

cls.prototype.sendControlOutTransferAsync = function sendControlOutTransferAsync(setupPacket, callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="setupPacket" type="UsbSetupPacket">A param.</param>
    /// </signature>
  }


  cls.prototype.sendControlInTransferAsync = function sendControlInTransferAsync(setupPacket, buffer, callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="setupPacket" type="UsbSetupPacket">A param.</param>
    /// <param name="buffer" type="Object">A param.</param>
    /// </signature>
  }

cls.prototype.sendControlInTransferAsync = function sendControlInTransferAsync(setupPacket, callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="setupPacket" type="UsbSetupPacket">A param.</param>
    /// </signature>
  }


  cls.prototype.close = function close() {
}


  cls.fromIdAsync = function fromIdAsync(deviceId, callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="deviceId" type="String">A param.</param>
    /// </signature>
  }



  cls.getDeviceSelector = function getDeviceSelector(vendorId, productId, winUsbInterfaceClass) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="vendorId" type="Number">A param.</param>
    /// <param name="productId" type="Number">A param.</param>
    /// <param name="winUsbInterfaceClass" type="String">A param.</param>
    /// <returns type="String" />
    /// </signature>
    return new String();
  }

cls.getDeviceSelector = function getDeviceSelector(winUsbInterfaceClass) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="winUsbInterfaceClass" type="String">A param.</param>
    /// <returns type="String" />
    /// </signature>
    return new String();
  }

cls.getDeviceSelector = function getDeviceSelector(vendorId, productId) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="vendorId" type="Number">A param.</param>
    /// <param name="productId" type="Number">A param.</param>
    /// <returns type="String" />
    /// </signature>
    return new String();
  }


  cls.getDeviceClassSelector = function getDeviceClassSelector(usbClass) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="usbClass" type="UsbDeviceClass">A param.</param>
    /// <returns type="String" />
    /// </signature>
    return new String();
  }


  return cls;
}) ();
exports.UsbDevice = UsbDevice;

UsbInterface = (function () {
  var cls = function UsbInterface() {
    this.bulkInPipes = new Object();
    this.bulkOutPipes = new Object();
    this.descriptors = new Object();
    this.interfaceNumber = new Number();
    this.interfaceSettings = new Object();
    this.interruptInPipes = new Object();
    this.interruptOutPipes = new Object();
  };
  

  return cls;
}) ();
exports.UsbInterface = UsbInterface;

UsbDeviceDescriptor = (function () {
  var cls = function UsbDeviceDescriptor() {
    this.bcdDeviceRevision = new Number();
    this.bcdUsb = new Number();
    this.maxPacketSize0 = new Number();
    this.numberOfConfigurations = new Number();
    this.productId = new Number();
    this.vendorId = new Number();
  };
  

  return cls;
}) ();
exports.UsbDeviceDescriptor = UsbDeviceDescriptor;

UsbConfiguration = (function () {
  var cls = function UsbConfiguration() {
    this.configurationDescriptor = new UsbConfigurationDescriptor();
    this.descriptors = new Object();
    this.usbInterfaces = new Object();
  };
  

  return cls;
}) ();
exports.UsbConfiguration = UsbConfiguration;

UsbDescriptor = (function () {
  var cls = function UsbDescriptor() {
    this.descriptorType = new Number();
    this.length = new Number();
  };
  

  cls.prototype.readDescriptorBuffer = function readDescriptorBuffer(buffer) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="buffer" type="Object">A param.</param>
    /// </signature>
  }


  return cls;
}) ();
exports.UsbDescriptor = UsbDescriptor;

UsbConfigurationDescriptor = (function () {
  var cls = function UsbConfigurationDescriptor() {
    this.configurationValue = new Number();
    this.maxPowerMilliamps = new Number();
    this.remoteWakeup = new Boolean();
    this.selfPowered = new Boolean();
  };
  

  cls.tryParse = function tryParse(descriptor, parsed) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="descriptor" type="UsbDescriptor">A param.</param>
    /// <param name="parsed" type="Object">A param.</param>
    /// <returns type="Boolean" />
    /// </signature>
    return new Boolean();
  }


  cls.parse = function parse(descriptor) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="descriptor" type="UsbDescriptor">A param.</param>
    /// <returns type="UsbConfigurationDescriptor" />
    /// </signature>
    return new UsbConfigurationDescriptor();
  }


  return cls;
}) ();
exports.UsbConfigurationDescriptor = UsbConfigurationDescriptor;

UsbInterfaceDescriptor = (function () {
  var cls = function UsbInterfaceDescriptor() {
    this.alternateSettingNumber = new Number();
    this.classCode = new Number();
    this.interfaceNumber = new Number();
    this.protocolCode = new Number();
    this.subclassCode = new Number();
  };
  

  cls.tryParse = function tryParse(descriptor, parsed) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="descriptor" type="UsbDescriptor">A param.</param>
    /// <param name="parsed" type="Object">A param.</param>
    /// <returns type="Boolean" />
    /// </signature>
    return new Boolean();
  }


  cls.parse = function parse(descriptor) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="descriptor" type="UsbDescriptor">A param.</param>
    /// <returns type="UsbInterfaceDescriptor" />
    /// </signature>
    return new UsbInterfaceDescriptor();
  }


  return cls;
}) ();
exports.UsbInterfaceDescriptor = UsbInterfaceDescriptor;

UsbBulkInEndpointDescriptor = (function () {
  var cls = function UsbBulkInEndpointDescriptor() {
    this.endpointNumber = new Number();
    this.maxPacketSize = new Number();
    this.pipe = new UsbBulkInPipe();
  };
  

  return cls;
}) ();
exports.UsbBulkInEndpointDescriptor = UsbBulkInEndpointDescriptor;

UsbInterruptInEndpointDescriptor = (function () {
  var cls = function UsbInterruptInEndpointDescriptor() {
    this.endpointNumber = new Number();
    this.interval = new Number();
    this.maxPacketSize = new Number();
    this.pipe = new UsbInterruptInPipe();
  };
  

  return cls;
}) ();
exports.UsbInterruptInEndpointDescriptor = UsbInterruptInEndpointDescriptor;

UsbBulkOutEndpointDescriptor = (function () {
  var cls = function UsbBulkOutEndpointDescriptor() {
    this.endpointNumber = new Number();
    this.maxPacketSize = new Number();
    this.pipe = new UsbBulkOutPipe();
  };
  

  return cls;
}) ();
exports.UsbBulkOutEndpointDescriptor = UsbBulkOutEndpointDescriptor;

UsbInterruptOutEndpointDescriptor = (function () {
  var cls = function UsbInterruptOutEndpointDescriptor() {
    this.endpointNumber = new Number();
    this.interval = new Number();
    this.maxPacketSize = new Number();
    this.pipe = new UsbInterruptOutPipe();
  };
  

  return cls;
}) ();
exports.UsbInterruptOutEndpointDescriptor = UsbInterruptOutEndpointDescriptor;

UsbEndpointDescriptor = (function () {
  var cls = function UsbEndpointDescriptor() {
    this.asBulkInEndpointDescriptor = new UsbBulkInEndpointDescriptor();
    this.asBulkOutEndpointDescriptor = new UsbBulkOutEndpointDescriptor();
    this.asInterruptInEndpointDescriptor = new UsbInterruptInEndpointDescriptor();
    this.asInterruptOutEndpointDescriptor = new UsbInterruptOutEndpointDescriptor();
    this.direction = new UsbTransferDirection();
    this.endpointNumber = new Number();
    this.endpointType = new UsbEndpointType();
  };
  

  cls.tryParse = function tryParse(descriptor, parsed) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="descriptor" type="UsbDescriptor">A param.</param>
    /// <param name="parsed" type="Object">A param.</param>
    /// <returns type="Boolean" />
    /// </signature>
    return new Boolean();
  }


  cls.parse = function parse(descriptor) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="descriptor" type="UsbDescriptor">A param.</param>
    /// <returns type="UsbEndpointDescriptor" />
    /// </signature>
    return new UsbEndpointDescriptor();
  }


  return cls;
}) ();
exports.UsbEndpointDescriptor = UsbEndpointDescriptor;

UsbInterruptInEventArgs = (function () {
  var cls = function UsbInterruptInEventArgs() {
    this.interruptData = new Object();
  };
  

  return cls;
}) ();
exports.UsbInterruptInEventArgs = UsbInterruptInEventArgs;

UsbInterruptInPipe = (function () {
  var cls = function UsbInterruptInPipe() {
    this.endpointDescriptor = new UsbInterruptInEndpointDescriptor();
  };
  

  cls.prototype.clearStallAsync = function clearStallAsync(callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// </signature>
  }


    cls.prototype.addListener = function addListener(eventName, callback){}
    cls.prototype.removeListener = function removeListener(eventName, callback){}
    cls.prototype.on = function on(eventName, callback){}
    cls.prototype.off = function off(eventName, callback){}
  return cls;
}) ();
exports.UsbInterruptInPipe = UsbInterruptInPipe;

UsbBulkInPipe = (function () {
  var cls = function UsbBulkInPipe() {
    this.readOptions = new UsbReadOptions();
    this.endpointDescriptor = new UsbBulkInEndpointDescriptor();
    this.inputStream = new Object();
    this.maxTransferSizeBytes = new Number();
  };
  

  cls.prototype.clearStallAsync = function clearStallAsync(callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// </signature>
  }


  cls.prototype.flushBuffer = function flushBuffer() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// </signature>
  }


  return cls;
}) ();
exports.UsbBulkInPipe = UsbBulkInPipe;

UsbBulkOutPipe = (function () {
  var cls = function UsbBulkOutPipe() {
    this.writeOptions = new UsbWriteOptions();
    this.endpointDescriptor = new UsbBulkOutEndpointDescriptor();
    this.outputStream = new Object();
  };
  

  cls.prototype.clearStallAsync = function clearStallAsync(callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// </signature>
  }


  return cls;
}) ();
exports.UsbBulkOutPipe = UsbBulkOutPipe;

UsbInterruptOutPipe = (function () {
  var cls = function UsbInterruptOutPipe() {
    this.writeOptions = new UsbWriteOptions();
    this.endpointDescriptor = new UsbInterruptOutEndpointDescriptor();
    this.outputStream = new Object();
  };
  

  cls.prototype.clearStallAsync = function clearStallAsync(callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// </signature>
  }


  return cls;
}) ();
exports.UsbInterruptOutPipe = UsbInterruptOutPipe;

UsbInterfaceSetting = (function () {
  var cls = function UsbInterfaceSetting() {
    this.bulkInEndpoints = new Object();
    this.bulkOutEndpoints = new Object();
    this.descriptors = new Object();
    this.interfaceDescriptor = new UsbInterfaceDescriptor();
    this.interruptInEndpoints = new Object();
    this.interruptOutEndpoints = new Object();
    this.selected = new Boolean();
  };
  

  cls.prototype.selectSettingAsync = function selectSettingAsync(callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// </signature>
  }


  return cls;
}) ();
exports.UsbInterfaceSetting = UsbInterfaceSetting;

