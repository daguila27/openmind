_CachedFileTarget = function () {
  this.local = 0;
  this.remote = 1;
}
exports.CachedFileTarget = new _CachedFileTarget();

_UIStatus = function () {
  this.unavailable = 0;
  this.hidden = 1;
  this.visible = 2;
  this.complete = 3;
}
exports.UIStatus = new _UIStatus();

_FileUpdateStatus = function () {
  this.incomplete = 0;
  this.complete = 1;
  this.userInputNeeded = 2;
  this.currentlyUnavailable = 3;
  this.failed = 4;
  this.completeAndRenamed = 5;
}
exports.FileUpdateStatus = new _FileUpdateStatus();

_CachedFileOptions = function () {
  this.none = 0;
  this.requireUpdateOnAccess = 1;
  this.useCachedFileWhenOffline = 2;
  this.denyAccessWhenOffline = 3;
}
exports.CachedFileOptions = new _CachedFileOptions();

_ReadActivationMode = function () {
  this.notNeeded = 0;
  this.beforeAccess = 1;
}
exports.ReadActivationMode = new _ReadActivationMode();

_WriteActivationMode = function () {
  this.readOnly = 0;
  this.notNeeded = 1;
  this.afterWrite = 2;
}
exports.WriteActivationMode = new _WriteActivationMode();

CachedFileUpdaterUI = (function () {
  var cls = function CachedFileUpdaterUI() {
    this.title = new String();
    this.uIStatus = new UIStatus();
    this.updateTarget = new CachedFileTarget();
  };
  

    cls.prototype.addListener = function addListener(eventName, callback){}
    cls.prototype.removeListener = function removeListener(eventName, callback){}
    cls.prototype.on = function on(eventName, callback){}
    cls.prototype.off = function off(eventName, callback){}
  return cls;
}) ();
exports.CachedFileUpdaterUI = CachedFileUpdaterUI;

FileUpdateRequestedEventArgs = (function () {
  var cls = function FileUpdateRequestedEventArgs() {
    this.request = new FileUpdateRequest();
  };
  

  return cls;
}) ();
exports.FileUpdateRequestedEventArgs = FileUpdateRequestedEventArgs;

FileUpdateRequest = (function () {
  var cls = function FileUpdateRequest() {
    this.status = new FileUpdateStatus();
    this.contentId = new String();
    this.file = new Object();
  };
  

  cls.prototype.getDeferral = function getDeferral() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <returns type="FileUpdateRequestDeferral" />
    /// </signature>
    return new FileUpdateRequestDeferral();
  }


  cls.prototype.updateLocalFile = function updateLocalFile(value) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="value" type="Object">A param.</param>
    /// </signature>
  }


  return cls;
}) ();
exports.FileUpdateRequest = FileUpdateRequest;

FileUpdateRequestDeferral = (function () {
  var cls = function FileUpdateRequestDeferral() {
  };
  

  cls.prototype.complete = function complete() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// </signature>
  }


  return cls;
}) ();
exports.FileUpdateRequestDeferral = FileUpdateRequestDeferral;

CachedFileUpdater = (function () {
  var cls = function CachedFileUpdater() {
  };
  

  cls.setUpdateInformation = function setUpdateInformation(file, contentId, readMode, writeMode, options) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="file" type="Object">A param.</param>
    /// <param name="contentId" type="String">A param.</param>
    /// <param name="readMode" type="ReadActivationMode">A param.</param>
    /// <param name="writeMode" type="WriteActivationMode">A param.</param>
    /// <param name="options" type="CachedFileOptions">A param.</param>
    /// </signature>
  }


  return cls;
}) ();
exports.CachedFileUpdater = CachedFileUpdater;

